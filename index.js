require("dotenv").config();
const { TelegramClient } = require("telegram");
const { StringSession } = require("telegram/sessions");
const { NewMessage } = require("telegram/events");
const input = require("input");
const fetch = require("node-fetch");
const fs = require("fs");

const apiId = parseInt(process.env.API_ID);
const apiHash = process.env.API_HASH;
const botToken = process.env.BOT_TOKEN;
const targetChatId = parseInt(process.env.CHAT_ID);
const keywords = (process.env.KEYWORDS || "").split(",").map((w) => w.trim());

const stringSession = new StringSession(
  process.env.SESSION ||
    (fs.existsSync("session.txt")
      ? fs.readFileSync("session.txt", "utf8")
      : ""),
);

async function sendNotification(text) {
  const url = `https://api.telegram.org/bot${botToken}/sendMessage`;

  try {
    const res = await fetch(url, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ chat_id: targetChatId, text }),
    });

    const data = await res.json();
    if (!data.ok) {
      console.error("‚ùå –û—à–∏–±–∫–∞ Telegram API:", data);
    } else {
      console.log("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.");
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", error);
  }
}

(async () => {
  const client = new TelegramClient(stringSession, apiId, apiHash, {
    connectionRetries: 5,
  });

  await client.start({
    phoneNumber: async () => await input.text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: "),
    password: async () => await input.text("–í–≤–µ–¥–∏—Ç–µ 2FA –ø–∞—Ä–æ–ª—å (–µ—Å–ª–∏ –µ—Å—Ç—å): "),
    phoneCode: async () => await input.text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: "),
    onError: (err) => console.log(err),
  });

  console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!");
  fs.writeFileSync("session.txt", client.session.save());

  await client.sendMessage("me", { message: "–°–∫—Ä–∏–ø—Ç Telegram –∑–∞–ø—É—â–µ–Ω!" });

  client.addEventHandler(async (event) => {
    const sender = await event.message.getSender();
    const isBot = sender?.bot;

    if (isBot) return;

    const text = event.message?.message;

    if (
      text &&
      keywords.some((word) => text.toLowerCase().includes(word.toLowerCase()))
    ) {
      console.log("–ù–∞–π–¥–µ–Ω–æ:", text);

      let messageLink = null;

      try {
        const peer = event.message.peerId;
        const messageId = event.message.id;
        const entity = await client.getEntity(peer);

        if (entity.username) {
          messageLink = `https://t.me/${entity.username}/${messageId}`;
          await client.sendMessage("me", { message: messageLink });
        } else {
          console.log("‚ö†Ô∏è –ì—Ä—É–ø–ø–∞/–∫–∞–Ω–∞–ª –Ω–µ –∏–º–µ–µ—Ç username, —Å—Å—ã–ª–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.");
        }
      } catch (error) {
        console.error("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É:", error);
      }

      const finalText = messageLink
        ? `üí¨ –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n${text}\n\nüîó ${messageLink}`
        : `üí¨ –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n${text}`;

      await sendNotification(finalText);
    }
  }, new NewMessage({}));
})();
